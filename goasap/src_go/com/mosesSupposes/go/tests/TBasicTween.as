package com.mosesSupposes.go.tests {	import org.goasap.events.GoEvent;		import com.mosesSupposes.go.tutorials.SizeTweenMG;		import fl.motion.easing.Bounce;	import fl.motion.easing.Quintic;		/**	 * @author Moses Gunesch / mosessupposes.com (c) all rights reserved	 */	public class TBasicTween extends GoTestBase {		/* 		 Tween example. Note that Go does not have a standard syntax, you can		 create tweens however you like them. I'm using the tutorial class		 SizeTweenMG here, because it supports tween-start properties, so you		 can run the tween more than once.		 */				public function TBasicTween() {			var tween1:SizeTweenMG = new SizeTweenMG(super.box());			tween1.id = "tween1"; // you can set any GoItem's id to any arbitrary value as a convenience.			tween1.easing = Quintic.easeInOut; // Linear.easeNone;			tween1.duration = 1.25;			tween1.startWidth = 10;			tween1.startHeight = 10;			tween1.width = 250;			tween1.height = 100;						/*			 cycles: "yoyos" the tween back and forth.			 You can set it to Math.POSITIVE_INFINITY or 0 for infinite cycling.			 You can also specify a secondary easing function for the return cycle.			*/			tween1.cycles = 3;			tween1.easingOnCycle = Bounce.easeOut;									// standard events dispatched by any LinearGo extension						tween1.addEventListener(GoEvent.START, super.traceEvent);			//tween1.addEventListener(GoEvent.UPDATE, super.traceEvent);			tween1.addEventListener(GoEvent.STOP, super.traceEvent);			tween1.addEventListener(GoEvent.COMPLETE, super.traceEvent);												// LinearGo also supports callbacks.						// STOP shows an example of using a nested method-closure to send arguments.			tween1.addCallback(traceTweenCallback, GoEvent.START);			//tween1.addCallback(traceTweenCallback, GoEvent.UPDATE);						// You can pass arguments using a nested closure. 			// Note too that if you omit the second param it defaults to COMPLETE.			tween1.addCallback(function ():void { traceTweenCallback("This is an argument passed to the callback."); });						super.addButtonUI(tween1, .5);		}				protected function traceTweenCallback(someParam:*=null) : void {			trace("Callback! "+(someParam==null ?"":someParam));		}	}}