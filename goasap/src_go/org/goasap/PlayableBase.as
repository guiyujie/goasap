/** * Copyright (c) 2007 Moses Gunesch *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package org.goasap {	import flash.events.EventDispatcher;	import flash.utils.getQualifiedClassName;		import org.goasap.errors.InstanceNotAllowedError;	import org.goasap.interfaces.IPlayable;		/**	 * Top-level abstract base class for IPlayable instances.	 * 	 * <p>	 * This class fleshes out the IPlayable interface with a standard set of 	 * play-state constants that can be used throughout the Go system. It also adds 	 * a convenient <code>id</code> property that can be used to more easily track 	 * instances, or even label them since it public and untyped. On its own, this 	 * class does nothing but set its own <code>state</code>.	 * </p>	 * 	 * @author Moses Gunesch	 */	public class PlayableBase extends EventDispatcher implements IPlayable {				// -== Play-state Constants ==-				/**		 * Instance play is currently stopped.		 */		public static const STOPPED			: String = "STOPPED";				/**		 * Instance play is currently paused.		 */		public static const PAUSED			: String = "PAUSED";				/**		 * Instance is currently playing a delay, but has not started playing.		 * Delays are a non-universal feature that must be custom-implemented,		 * so some subclasses of PlayableBase may never use this constant. 		 */		public static const PLAYING_DELAY	: String = "PLAYING_DELAY";				/**		 * Instance play is currently playing.		 */		public static const PLAYING			: String = "PLAYING";				// -== Public Properties ==-				/**		 * An arbitrary id value for the convenient identification of any		 * instance. Can be set to an instance-count number by Go classes. 		 */		public var id:*;		/**		 * Returns the value of one of this class' play-state constants.		 * @see #STOPPED		 * @see #PAUSED		 * @see #PLAYING_DELAY		 * @see #PLAYING		 */		public function get state() : String {			return _state;		}		// -== Protected Properties ==-				private static var _idCounter	: int = -1;		/**		 * @private		 */		protected var _state : String = STOPPED;				// -== Public Methods ==-				public function PlayableBase() : void {			var className:String = getQualifiedClassName(this);			if (className.slice(className.lastIndexOf("::")+2) == "PlayableBase") {				throw new InstanceNotAllowedError("PlayableBase");			}			id = ++ _idCounter;		}				public function start() : Boolean {			_state = PLAYING;			return true;		}				public function stop() : Boolean {			if (_state==STOPPED)				return false;			_state = STOPPED;			return true;		}				public function pause() : Boolean {			if (_state==STOPPED || _state==PAUSED)				return false;			_state = PAUSED;			return true;		}				public function resume() : Boolean {			if (_state != PAUSED)				return false;			_state = PLAYING;			return true;		}				public function skipTo(position : Number) : Boolean {			_state = PLAYING;			return true;		}				/**		 * Appends the regular toString value with the instance's id.		 * 		 * @return	String representation of this instance.		 */		override public function toString():String {			var s:String = super.toString();			var addLast:Boolean = (s.charAt(s.length-1)=="]");			if (addLast) s = s.slice(0,-1);			if (id is String) s += " id:\"" + id + "\"";			else s += " id:" + id;			if (addLast) s += "]";			return s;		}	}}