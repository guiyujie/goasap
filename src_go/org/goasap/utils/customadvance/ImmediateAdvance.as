/** * Copyright (c) 2009 Moses Gunesch *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package org.goasap.utils.customadvance {	/**	 * A custom advance type that triggers when any playable item (presumably one item	 * in the step) dispatches STOP or COMPLETE.	 * 	 * @author Moses Gunesch	 */	public class ImmediateAdvance extends SequenceAdvance {				/**		 * @param item		Any playable item that dispatches STOP or COMPLETE,  		 * 					normally a child item in the step using this custom advance.		 */		public function ImmediateAdvance() : void {			super();		}				override public function start() : Boolean {			super.dispatchAdvance();			return true;		}	}}