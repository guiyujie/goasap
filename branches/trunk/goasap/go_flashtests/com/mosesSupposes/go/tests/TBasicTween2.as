package com.mosesSupposes.go.tests {	import org.goasap.events.GoEvent;		import com.mosesSupposes.go.tutorials.SizeTweenMG;		import fl.motion.easing.Bounce;	import fl.motion.easing.Quintic;		/**	 * @author Moses Gunesch	 */	public class TBasicTween2 extends GoTestBase {		public function TBasicTween2() {						// This takes the basic example in TBasicTween and shows a few more features.						var tween1:SizeTweenMG = new SizeTweenMG();			tween1.target = super.box();			tween1.playableID = "tween1"; // you can set any GoItem's id to any arbitrary value as a convenience.			tween1.easing = Quintic.easeInOut; // Linear.easeNone;			tween1.delay = .25;			tween1.duration = 1.25;			tween1.startWidth = 10;			tween1.startHeight = 10;			tween1.width = 250;			tween1.height = 100;						// cycles: "yoyos" the tween back and forth.			// You can also specify a secondary easing function for the return cycle.			tween1.repeater.cycles = 3; // or use Repeater.INFINITE for indefinite cycling.			tween1.repeater.easingOnCycle = Bounce.easeOut; // You can set an alternate easing for return cycles.						// Any LinearGo extension dispatches standard events.			tween1.addEventListener(GoEvent.START, super.traceEvent);			//tween1.addEventListener(GoEvent.UPDATE, super.traceEvent);			tween1.addEventListener(GoEvent.PAUSE, super.traceEvent);			tween1.addEventListener(GoEvent.RESUME, super.traceEvent);			tween1.addEventListener(GoEvent.CYCLE, super.traceEvent);			tween1.addEventListener(GoEvent.STOP, super.traceEvent);			tween1.addEventListener(GoEvent.COMPLETE, super.traceEvent);						// As a slightly simpler and faster alternative to events, LinearGo also supports callbacks.			tween1.addCallback(traceTweenCallback); // The default type is COMPLETE if not specified.			tween1.addCallback(traceTweenCallback); // You can have any number of callbacks for any one type.			tween1.addCallback(traceTweenCallback, GoEvent.START); // This callback is fired at tween START.						// Tip: You can pass arguments in callbacks by using a nested closure. 			tween1.addCallback(function():void{ traceTweenCallback("This is an argument passed to the callback."); });						super.addButtonUI(tween1, .5);		}				protected function traceTweenCallback(someParam:*=null) : void {			trace("Callback! "+(someParam==null ?"":someParam));		}	}}